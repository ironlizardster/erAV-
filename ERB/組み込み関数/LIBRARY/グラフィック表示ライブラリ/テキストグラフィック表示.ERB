;********************************************************************************************
;2021/11/17 作成 ロウ@TW夢子口上の人
;
;Licence  :ライセンスフリー(CC0)。
;
;グラフィック表示簡易化ライブラリ G,CBG関連関数および「Emuera1824+v11+EEv3」対応版 
;なんかややこしいグラフィック表示関連を簡単に表示できるようにまとめたもの。
;GIDの管理とかいちいちめんどくさいし、解放忘れそうだし重複しそうだからっていうことで作りました。
;********************************************************************************************

;********************************************************************************************
;セットフォント
;ライブラリ内で使用するフォントを設定するための関数
;********************************************************************************************
@GLセットフォント(フォント名)
#DIMS フォント名
GLフォント = フォント名
RETURN 1

;********************************************************************************************
;セットフォントサイズ
;ライブラリ内で使用するフォントサイズを設定するための関数
;********************************************************************************************
@GLセットフォントサイズ(フォントサイズ)
#DIM フォントサイズ
GLフォントサイズ = フォントサイズ
RETURN 1

;********************************************************************************************
;セットフォントカラー
;ライブラリ内で使用するフォントを設定するための関数
;********************************************************************************************
@GLセットフォントカラー(フォントカラー)
#DIM フォントカラー
GLフォントカラー = フォントカラー
RETURN 1

;********************************************************************************************
;テキストグラフィック生成
;テキストグラフィックを生成するための関数
;同じグラフィックIDを指定すれば同じグラフィックに描画する。
;この時新規グラフィックID、もしくは0を指定されていた場合に縦幅、横幅が指定されていなければエラーになる。
;********************************************************************************************
@テキストグラフィック生成(グラフィックID, テキスト, 横描画位置, 縦描画位置, x座標 = 0, y座標 = 0, 横幅 = 0, 縦幅 = 0)
#DIMS テキスト					;表示するリソースファイル名称
#DIM 横描画位置					;記述する描画位置 0:左揃え 1:中央揃え 2:右揃え
#DIM 縦描画位置					;記述する描画位置 0:左揃え 1:中央揃え 2:下揃え
#DIM x座標						;描画する際のx座標 左下基準
#DIM y座標						;描画する際のy座標 左下基準
#DIM 横幅						;描画する際の横幅
#DIM 縦幅						;描画する際の縦幅
#DIM z座標						;描画する際のz座標 0がテキスト描画領域 負数は手前を表す
#DIM REF グラフィックID			;使用するグラフィックID
;グラフィックIDがまだ作成されていないなら新規登録する
IF グラフィックID == 0 || !GCREATED(グラフィックID)

	;グラフィックIDが作成されていない場合は横幅と縦幅が指定されているかを確認する
	IF 横幅 <= 0 || 縦幅 <= 0
		DEBUGPRINTFORML 新規グラフィック作成時は縦横幅の指定が必須です。
		RETURN
	ENDIF
	
	IF グラフィックID == 0
		;前回呼び出されていれば続きから始める
		グラフィックID = NEXT_GID
		WHILE GCREATED(グラフィックID)
			;空いているグラフィックIDを走査する
			グラフィックID ++
		WEND
		;次回は続きから走査するように設定
		NEXT_GID = グラフィックID + 1
	ENDIF
	
	;グラフィック作成
	GCREATE グラフィックID, 横幅, 縦幅
	IF RESULT == 0
		DEBUGPRINTFORML グラフィックの作成に失敗しました。
		RETURN 0
	ENDIF
	
	;ライブラリ内履歴に追加
	GPLグラフィックID:GPL保有GID数 = グラフィックID
	GPLリソース名:GPL保有GID数 '= "[[TEXT]]"
	GPL保有GID数++
	DEBUGPRINTFORML グラフィック番号「{グラフィックID}」を登録しました。
ELSE
	;すでにあるグラフィックに描画する場合は縦幅と横幅を取得する
	横幅 = GWIDTH(グラフィックID)
	縦幅 = GHEIGHT(グラフィックID)
ENDIF

;フォント設定を行う
GSETFONT グラフィックID, GLフォント, GLフォントサイズ
GSETBRUSH グラフィックID, GLフォントカラー

;フォントサイズ、およびグラフィックサイズから描画位置を特定する
IF 横描画位置 == 2
	x座標 = 横幅 + x座標 - (STRLENS(テキスト) * GLフォントサイズ / 2) - 20
ELSEIF 横描画位置 == 1
	x座標 = (横幅 / 2) + x座標 - (STRLENS(テキスト) * GLフォントサイズ / 4) - 10
ENDIF
IF 縦描画位置 == 2
	y座標 = 縦幅 + y座標 - GLフォントサイズ
ELSEIF 縦描画位置 == 1
	y座標 = (縦幅 / 2) + y座標 - (GLフォントサイズ / 2)
ENDIF

;グラフィックにテキストを描画する
GDRAWTEXT グラフィックID, テキスト, x座標, y座標

DEBUGPRINTFORML グラフィック番号「{グラフィックID}」にテキスト「%テキスト%」を登録しました。
RETURN 1


;********************************************************************************************
;テキストグラフィック接続合成
;＊＊＊！！！作成途中（改行の数、および後述する文字揃え問題により見送り）！！！＊＊＊
;テキストグラフィックを接続して合成するための関数
;同じグラフィックIDを指定すれば、同じグラフィックに前回呼び出した続きから描画する。
;この時新規グラフィックID、もしくは0を指定されていた場合に縦幅、横幅が指定されていなければエラーになる。
;現状この合成関数では中央揃え、および右揃えが意味を成していない。（文字が増えると相対的に文字の位置が変わるため）
;また、等幅フォント以外を指定していると横幅がずれるため、実用性に薄い。
;********************************************************************************************
@テキストグラフィック接続合成(グラフィックID, テキスト, 描画位置, x座標 = 0, y座標 = 0, 横幅 = 0, 縦幅 = 0)
#DIMS テキスト					;表示するリソースファイル名称
#DIM 描画位置					;記述する描画位置 0:左揃え 1:中央揃え 2:右揃え
#DIM x座標						;描画する際のx座標 左下基準
#DIM y座標						;描画する際のy座標 左下基準
#DIM 横幅						;描画する際の横幅
#DIM 縦幅						;描画する際の縦幅
#DIM z座標						;描画する際のz座標 0がテキスト描画領域 負数は手前を表す
#DIM REF グラフィックID			;使用するグラフィックID
#DIM テキスト文字数				;指定されたテキストの文字数
#DIM テキスト縦位置
#DIM テキスト横位置
;y座標を反転させる
y座標 = -y座標
;グラフィックIDがまだ作成されていないなら新規登録する
IF グラフィックID == 0 || !GCREATED(グラフィックID)

	;グラフィックIDが作成されていない場合は横幅と縦幅が指定されているかを確認する
	IF 横幅 <= 0 || 縦幅 <= 0
		DEBUGPRINTFORML 新規グラフィック作成時は縦横幅の指定が必須です。
		RETURN
	ENDIF
	
	IF グラフィックID == 0
		;前回呼び出されていれば続きから始める
		グラフィックID = NEXT_GID
		WHILE GCREATED(グラフィックID)
			;空いているグラフィックIDを走査する
			グラフィックID ++
		WEND
		;次回は続きから走査するように設定
		NEXT_GID = グラフィックID + 1
	ENDIF
	
	;グラフィック作成
	GCREATE グラフィックID, 横幅, 縦幅
	IF RESULT == 0
		DEBUGPRINTFORML グラフィックの作成に失敗しました。
		RETURN 0
	ENDIF
	
	;ライブラリ内履歴に追加
	GPLグラフィックID:GPL保有GID数 = グラフィックID
	GPLリソース名:GPL保有GID数 '= "[[TEXT]]"
	GPL保有GID数++
	DEBUGPRINTFORML グラフィック番号「{グラフィックID}」を登録しました。
ELSE
	;すでにあるグラフィックに描画する場合は縦幅と横幅を取得する
	横幅 = GWIDTH(グラフィックID)
	縦幅 = GHEIGHT(グラフィックID)
ENDIF

;フォント設定を行う
GSETFONT グラフィックID, GLフォント, GLフォントサイズ
GSETBRUSH グラフィックID, GLフォントカラー

テキスト文字数 = STRLENS(テキスト)
FOR LOCAL, 0, GLTG保持数
	IF GLTG保持情報:LOCAL:0 == グラフィックID
		テキスト横位置 = GLTG保持情報:LOCAL:1
		テキスト縦位置 = GLTG保持情報:LOCAL:2
		GLTG保持情報:LOCAL:1 = GLTG保持情報:LOCAL:1 + テキスト文字数
		LOCAL--
		BREAK
	ENDIF
	IF LOCAL == GLTG保持数 && GLTG保持数 < GPL最大保有GID数
		GLTG保持情報:GLTG保持数:0 = グラフィックID
		LOCAL = GLTG保持数 - 1
		GLTG保持数++
		BREAK
	ENDIF
NEXT

;フォントサイズ、およびグラフィックサイズから描画位置を特定する
IF 描画位置 == 2
	x座標 = 横幅 + x座標 - テキスト文字数
ELSEIF 描画位置 == 1
	x座標 = 横幅 / 2 + x座標 - テキスト文字数 / 2
ENDIF

;グラフィックにテキストを描画する
GDRAWTEXT グラフィックID, テキスト

DEBUGPRINTFORML グラフィック番号「{グラフィックID}」にテキスト「%テキスト%」を登録しました。
RETURN 1
